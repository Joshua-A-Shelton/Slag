#ifndef SLAG_GPUMEMORYBARRIERS_H
#define SLAG_GPUMEMORYBARRIERS_H

#define PIPELINE_STAGE_DEFINTITIONS(DEFINITION) \
DEFINITION(NONE,0x00000000,VK_PIPELINE_STAGE_NONE, UNDEFINED) \
DEFINITION(TOP,0x00000001,VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT, UNDEFINED) \
DEFINITION(DRAW_INDIRECT ,0x00000002,VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT, UNDEFINED) \
DEFINITION(VERTEX_INPUT ,0x00000004,VK_PIPELINE_STAGE_VERTEX_INPUT_BIT , UNDEFINED) \
DEFINITION(VERTEX_SHADER,0x00000008,VK_PIPELINE_STAGE_VERTEX_SHADER_BIT , UNDEFINED) \
DEFINITION(TESSELLATION_CONTROL_SHADER,0x00000010,VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT , UNDEFINED) \
DEFINITION(TESSELLATION_EVALUATION_SHADER,0x00000020,VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT , UNDEFINED) \
DEFINITION(GEOMETRY_SHADER,0x00000040,VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT , UNDEFINED) \
DEFINITION(FRAGMENT_SHADER,0x00000080,VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT , UNDEFINED) \
DEFINITION(EARLY_FRAGMENT_TESTS,0x00000100,VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT , UNDEFINED) \
DEFINITION(LATE_FRAGMENT_TESTS,0x00000200,VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT, UNDEFINED) \
DEFINITION(COLOR_ATTACHMENT_OUTPUT,0x00000400,VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT , UNDEFINED) \
DEFINITION(STAGE_COMPUTE_SHADER,0x00000800,VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT , UNDEFINED) \
DEFINITION(STAGE_TRANSFER,0x00001000,VK_PIPELINE_STAGE_TRANSFER_BIT, UNDEFINED) \
DEFINITION(BOTTOM,0x00002000,VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT , UNDEFINED) \
DEFINITION(HOST,0x00004000,VK_PIPELINE_STAGE_HOST_BIT , UNDEFINED) \
DEFINITION(ALL_GRAPHICS,0x00008000,VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT , UNDEFINED) \
DEFINITION(ALL_COMMANDS,0x00010000,VK_PIPELINE_STAGE_ALL_COMMANDS_BIT , UNDEFINED) \

#define PIPELINE_ACCESS_DEFINITIONS(DEFINITION) \
DEFINITION(NONE,0x00000000,VK_ACCESS_NONE,UNDEFINED) \
DEFINITION(INDIRECT_COMMAND_READ_BIT,0x00000001,VK_ACCESS_INDIRECT_COMMAND_READ_BIT,UNDEFINED) \
DEFINITION(INDEX_READ_BIT,0x00000002,VK_ACCESS_INDEX_READ_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_VERTEX_ATTRIBUTE_READ_BIT,0x00000004,VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_UNIFORM_READ_BIT,0x00000008,VK_ACCESS_UNIFORM_READ_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_INPUT_ATTACHMENT_READ_BIT,0x00000010,VK_ACCESS_INPUT_ATTACHMENT_READ_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_SHADER_READ_BIT,0x00000020,VK_ACCESS_SHADER_READ_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_SHADER_WRITE_BIT,0x00000040,VK_ACCESS_SHADER_WRITE_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_COLOR_ATTACHMENT_READ_BIT,0x00000080,VK_ACCESS_COLOR_ATTACHMENT_READ_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_COLOR_ATTACHMENT_WRITE_BIT,0x00000100,VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,0x00000200,VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,0x00000400,VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_TRANSFER_READ_BIT,0x00000800,VK_ACCESS_TRANSFER_READ_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_TRANSFER_WRITE_BIT,0x00001000,VK_ACCESS_TRANSFER_WRITE_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_HOST_READ_BIT,0x00002000,VK_ACCESS_HOST_READ_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_HOST_WRITE_BIT,0x00004000,VK_ACCESS_HOST_WRITE_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_MEMORY_READ_BIT,0x00008000,VK_ACCESS_MEMORY_READ_BIT,UNDEFINED)                       \
DEFINITION(ACCESS_MEMORY_WRITE_BIT,0x00010000,VK_ACCESS_MEMORY_WRITE_BIT,UNDEFINED)                       \

#include "Texture.h"
#include <string>
namespace slag
{
    struct PipelineStage
    {
        enum PipelineStageFlags
        {
#define DEFINITION(slagName, slagValue, vulkanName, directXName) slagName = slagValue,
            PIPELINE_STAGE_DEFINTITIONS(DEFINITION)
#undef DEFINITION
        };
    };
    struct PipelineAccess
    {
        enum PipeLineAccessFlags
        {
#define DEFINITION(slagName, slagValue, vulkanName, directXName) slagName = slagValue,
            PIPELINE_ACCESS_DEFINITIONS(DEFINITION)
#undef DEFINITION
        };

    };

    inline PipelineAccess::PipeLineAccessFlags operator|(PipelineAccess::PipeLineAccessFlags a,PipelineAccess::PipeLineAccessFlags b)
    {
        return static_cast<PipelineAccess::PipeLineAccessFlags>(static_cast<unsigned int>(a) | static_cast<unsigned int>(b));
    }

    struct GPUMemoryBarrier
    {

    };
    struct ImageMemoryBarrier
    {
        Texture::Layout oldLayout;
        Texture::Layout newLayout;
        PipelineAccess::PipeLineAccessFlags requireCachesFinish;
        PipelineAccess::PipeLineAccessFlags usingCaches;
        Texture* texture;
    };
    struct BufferMemoryBarrier
    {

    };

    namespace framegraph
    {
        struct VirtualImageMemoryBarrier
        {
            Texture::Layout oldLayout;
            Texture::Layout newLayout;
            PipelineAccess::PipeLineAccessFlags requireCachesFinish;
            PipelineAccess::PipeLineAccessFlags usingCaches;
            std::string textureName;
        };
    }

}
#endif //SLAG_GPUMEMORYBARRIERS_H
